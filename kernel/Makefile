# GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),debug)
  RESCOMP = windres
  TARGETDIR = bin/debug
  TARGET = $(TARGETDIR)/kernel.elf
  OBJDIR = obj/debug
  DEFINES +=
  INCLUDES += -Iinclude -I../lib/ext/include -I../lib/tlsf/include -I../lib/lwip/include -I../lib/lwip/src/include -I../lib/lwip/src/include/ipv4
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g -Wall -Wextra -ffreestanding -std=gnu99 -Wno-unused-parameter -mcmodel=kernel
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS)
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../lib/ext/bin/debug/libext.a ../lib/TLSF-2.4.6/bin/debug/libtlsf.a ../lib/lwip-1.4.1/bin/debug/liblwip.a
  LDDEPS += ../lib/ext/bin/debug/libext.a ../lib/TLSF-2.4.6/bin/debug/libtlsf.a ../lib/lwip-1.4.1/bin/debug/liblwip.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -L../lib/ext -L../lib/tlsf -L../lib/lwip -m64 -nostdlib -T elf_x86_64.ld -e main
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
	@echo Running prebuild commands
	./mkver.sh > src/version.h
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	ln -sfrv bin/debug/kernel.elf .
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release)
  RESCOMP = windres
  TARGETDIR = bin/release
  TARGET = $(TARGETDIR)/kernel.elf
  OBJDIR = obj/release
  DEFINES +=
  INCLUDES += -Iinclude -I../lib/ext/include -I../lib/tlsf/include -I../lib/lwip/include -I../lib/lwip/src/include -I../lib/lwip/src/include/ipv4
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -Wall -Wextra -ffreestanding -std=gnu99 -Wno-unused-parameter -mcmodel=kernel
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS)
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../lib/ext/bin/release/libext.a ../lib/TLSF-2.4.6/bin/release/libtlsf.a ../lib/lwip-1.4.1/bin/release/liblwip.a
  LDDEPS += ../lib/ext/bin/release/libext.a ../lib/TLSF-2.4.6/bin/release/libtlsf.a ../lib/lwip-1.4.1/bin/release/liblwip.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -L../lib/ext -L../lib/tlsf -L../lib/lwip -m64 -s -nostdlib -T elf_x86_64.ld -e main
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
	@echo Running prebuild commands
	./mkver.sh > src/version.h
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	ln -sfrv bin/release/kernel.elf .
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),linux)
  RESCOMP = windres
  TARGETDIR = bin/linux
  TARGET = $(TARGETDIR)/kernel.elf
  OBJDIR = obj/linux
  DEFINES +=
  INCLUDES += -Iinclude -I../lib/ext/include -I../lib/tlsf/include -I../lib/lwip/include -I../lib/lwip/src/include -I../lib/lwip/src/include/ipv4
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -Wall -Wextra -ffreestanding -std=gnu99 -Wno-unused-parameter -mcmodel=kernel
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS)
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../lib/ext/bin/linux/libext.a ../lib/TLSF-2.4.6/bin/linux/libtlsf.a ../lib/lwip-1.4.1/bin/linux/liblwip.a
  LDDEPS += ../lib/ext/bin/linux/libext.a ../lib/TLSF-2.4.6/bin/linux/libtlsf.a ../lib/lwip-1.4.1/bin/linux/liblwip.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -L../lib/ext -L../lib/tlsf -L../lib/lwip -m64 -s -nostdlib -T elf_x86_64.ld -e main
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
	@echo Running prebuild commands
	./mkver.sh > src/version.h
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	ln -sfrv bin/linux/kernel.elf .
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/acpi.o \
	$(OBJDIR)/apic.o \
	$(OBJDIR)/cpu.o \
	$(OBJDIR)/device.o \
	$(OBJDIR)/bfs.o \
	$(OBJDIR)/console.o \
	$(OBJDIR)/disk.o \
	$(OBJDIR)/dummy.o \
	$(OBJDIR)/fs.o \
	$(OBJDIR)/keyboard.o \
	$(OBJDIR)/pata.o \
	$(OBJDIR)/port.o \
	$(OBJDIR)/ramdisk.o \
	$(OBJDIR)/serial.o \
	$(OBJDIR)/stdin.o \
	$(OBJDIR)/stdout.o \
	$(OBJDIR)/__udivdi3.o \
	$(OBJDIR)/__umoddi3.o \
	$(OBJDIR)/console1.o \
	$(OBJDIR)/ctype.o \
	$(OBJDIR)/ehci.o \
	$(OBJDIR)/ehci_rh.o \
	$(OBJDIR)/generic_hub.o \
	$(OBJDIR)/memory.o \
	$(OBJDIR)/pci.o \
	$(OBJDIR)/quirks.o \
	$(OBJDIR)/usb.o \
	$(OBJDIR)/usb_dev.o \
	$(OBJDIR)/usbclient.o \
	$(OBJDIR)/usbhid.o \
	$(OBJDIR)/usbhub.o \
	$(OBJDIR)/usbinit.o \
	$(OBJDIR)/usbmsc.o \
	$(OBJDIR)/vga.o \
	$(OBJDIR)/video.o \
	$(OBJDIR)/vga1.o \
	$(OBJDIR)/virtio_blk.o \
	$(OBJDIR)/virtio_ring.o \
	$(OBJDIR)/file.o \
	$(OBJDIR)/gdt.o \
	$(OBJDIR)/gmalloc.o \
	$(OBJDIR)/icc.o \
	$(OBJDIR)/idt.o \
	$(OBJDIR)/ioapic.o \
	$(OBJDIR)/loader.o \
	$(OBJDIR)/main.o \
	$(OBJDIR)/malloc.o \
	$(OBJDIR)/manager.o \
	$(OBJDIR)/module.o \
	$(OBJDIR)/mp.o \
	$(OBJDIR)/pci1.o \
	$(OBJDIR)/rtc.o \
	$(OBJDIR)/shared.o \
	$(OBJDIR)/shell.o \
	$(OBJDIR)/stdio.o \
	$(OBJDIR)/string.o \
	$(OBJDIR)/symbols.o \
	$(OBJDIR)/task.o \
	$(OBJDIR)/vfio.o \
	$(OBJDIR)/vm.o \
	$(OBJDIR)/vnic.o \

RESOURCES := \

CUSTOMFILES := \

ifeq ($(config),debug)
  OBJECTS += \
	obj/debug/apic_asm.o \
	obj/debug/asm.o \
	obj/debug/entry.o \
	obj/debug/isr.o \
	obj/debug/port_asm.o \
	obj/debug/task_asm.o \

endif

ifeq ($(config),release)
  OBJECTS += \
	obj/release/apic_asm.o \
	obj/release/asm.o \
	obj/release/entry.o \
	obj/release/isr.o \
	obj/release/port_asm.o \
	obj/release/task_asm.o \

endif

ifeq ($(config),linux)
  OBJECTS += \
	obj/linux/apic_asm.o \
	obj/linux/asm.o \
	obj/linux/entry.o \
	obj/linux/isr.o \
	obj/linux/port_asm.o \
	obj/linux/task_asm.o \
	$(OBJDIR)/Suite1.o \
	$(OBJDIR)/file1.o \
	$(OBJDIR)/gmalloc1.o \
	$(OBJDIR)/test.o \

endif

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking kernel
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning kernel
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/acpi.o: src/acpi.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/apic.o: src/apic.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
ifeq ($(config),debug)
obj/debug/apic_asm.o: src/apic_asm.asm
	@echo "Compiling src/apic_asm.asm"
	$(SILENT) nasm -o "obj/debug/apic_asm.o" "src/apic_asm.asm" -f elf64
endif
ifeq ($(config),release)
obj/release/apic_asm.o: src/apic_asm.asm
	@echo "Compiling src/apic_asm.asm"
	$(SILENT) nasm -o "obj/release/apic_asm.o" "src/apic_asm.asm" -f elf64
endif
ifeq ($(config),linux)
obj/linux/apic_asm.o: src/apic_asm.asm
	@echo "Compiling src/apic_asm.asm"
	$(SILENT) nasm -o "obj/linux/apic_asm.o" "src/apic_asm.asm" -f elf64
endif
ifeq ($(config),debug)
obj/debug/asm.o: src/asm.asm
	@echo "Compiling src/asm.asm"
	$(SILENT) nasm -o "obj/debug/asm.o" "src/asm.asm" -f elf64
endif
ifeq ($(config),release)
obj/release/asm.o: src/asm.asm
	@echo "Compiling src/asm.asm"
	$(SILENT) nasm -o "obj/release/asm.o" "src/asm.asm" -f elf64
endif
ifeq ($(config),linux)
obj/linux/asm.o: src/asm.asm
	@echo "Compiling src/asm.asm"
	$(SILENT) nasm -o "obj/linux/asm.o" "src/asm.asm" -f elf64
endif
$(OBJDIR)/cpu.o: src/cpu.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/device.o: src/device.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/bfs.o: src/driver/bfs.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/console.o: src/driver/console.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/disk.o: src/driver/disk.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dummy.o: src/driver/dummy.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fs.o: src/driver/fs.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/keyboard.o: src/driver/keyboard.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/pata.o: src/driver/pata.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/port.o: src/driver/port.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ramdisk.o: src/driver/ramdisk.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/serial.o: src/driver/serial.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdin.o: src/driver/stdin.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdout.o: src/driver/stdout.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/__udivdi3.o: src/driver/usb/__udivdi3.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/__umoddi3.o: src/driver/usb/__umoddi3.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/console1.o: src/driver/usb/console.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ctype.o: src/driver/usb/ctype.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ehci.o: src/driver/usb/ehci.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ehci_rh.o: src/driver/usb/ehci_rh.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/generic_hub.o: src/driver/usb/generic_hub.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/memory.o: src/driver/usb/memory.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/pci.o: src/driver/usb/pci.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/quirks.o: src/driver/usb/quirks.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usb.o: src/driver/usb/usb.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usb_dev.o: src/driver/usb/usb_dev.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usbclient.o: src/driver/usb/usbclient.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usbhid.o: src/driver/usb/usbhid.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usbhub.o: src/driver/usb/usbhub.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usbinit.o: src/driver/usb/usbinit.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/usbmsc.o: src/driver/usb/usbmsc.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vga.o: src/driver/usb/vga.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/video.o: src/driver/usb/video.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vga1.o: src/driver/vga.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/virtio_blk.o: src/driver/virtio_blk.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/virtio_ring.o: src/driver/virtio_ring.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
ifeq ($(config),debug)
obj/debug/entry.o: src/entry.asm
	@echo "Compiling src/entry.asm"
	$(SILENT) nasm -o "obj/debug/entry.o" "src/entry.asm" -f elf64
endif
ifeq ($(config),release)
obj/release/entry.o: src/entry.asm
	@echo "Compiling src/entry.asm"
	$(SILENT) nasm -o "obj/release/entry.o" "src/entry.asm" -f elf64
endif
ifeq ($(config),linux)
obj/linux/entry.o: src/entry.asm
	@echo "Compiling src/entry.asm"
	$(SILENT) nasm -o "obj/linux/entry.o" "src/entry.asm" -f elf64
endif
$(OBJDIR)/file.o: src/file.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/gdt.o: src/gdt.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/gmalloc.o: src/gmalloc.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/icc.o: src/icc.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/idt.o: src/idt.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ioapic.o: src/ioapic.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
ifeq ($(config),debug)
obj/debug/isr.o: src/isr.asm
	@echo "Compiling src/isr.asm"
	$(SILENT) nasm -o "obj/debug/isr.o" "src/isr.asm" -f elf64
endif
ifeq ($(config),release)
obj/release/isr.o: src/isr.asm
	@echo "Compiling src/isr.asm"
	$(SILENT) nasm -o "obj/release/isr.o" "src/isr.asm" -f elf64
endif
ifeq ($(config),linux)
obj/linux/isr.o: src/isr.asm
	@echo "Compiling src/isr.asm"
	$(SILENT) nasm -o "obj/linux/isr.o" "src/isr.asm" -f elf64
endif
$(OBJDIR)/loader.o: src/loader.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/main.o: src/main.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/malloc.o: src/malloc.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/manager.o: src/manager.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/module.o: src/module.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mp.o: src/mp.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/pci1.o: src/pci.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
ifeq ($(config),debug)
obj/debug/port_asm.o: src/port_asm.asm
	@echo "Compiling src/port_asm.asm"
	$(SILENT) nasm -o "obj/debug/port_asm.o" "src/port_asm.asm" -f elf64
endif
ifeq ($(config),release)
obj/release/port_asm.o: src/port_asm.asm
	@echo "Compiling src/port_asm.asm"
	$(SILENT) nasm -o "obj/release/port_asm.o" "src/port_asm.asm" -f elf64
endif
ifeq ($(config),linux)
obj/linux/port_asm.o: src/port_asm.asm
	@echo "Compiling src/port_asm.asm"
	$(SILENT) nasm -o "obj/linux/port_asm.o" "src/port_asm.asm" -f elf64
endif
$(OBJDIR)/rtc.o: src/rtc.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/shared.o: src/shared.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/shell.o: src/shell.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdio.o: src/stdio.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/string.o: src/string.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/symbols.o: src/symbols.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/task.o: src/task.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
ifeq ($(config),debug)
obj/debug/task_asm.o: src/task_asm.asm
	@echo "Compiling src/task_asm.asm"
	$(SILENT) nasm -o "obj/debug/task_asm.o" "src/task_asm.asm" -f elf64
endif
ifeq ($(config),release)
obj/release/task_asm.o: src/task_asm.asm
	@echo "Compiling src/task_asm.asm"
	$(SILENT) nasm -o "obj/release/task_asm.o" "src/task_asm.asm" -f elf64
endif
ifeq ($(config),linux)
obj/linux/task_asm.o: src/task_asm.asm
	@echo "Compiling src/task_asm.asm"
	$(SILENT) nasm -o "obj/linux/task_asm.o" "src/task_asm.asm" -f elf64
endif
$(OBJDIR)/Suite1.o: src/test/Suite1.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/file1.o: src/test/file.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/gmalloc1.o: src/test/gmalloc.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/test.o: src/test/test.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vfio.o: src/vfio.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vm.o: src/vm.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vnic.o: src/vnic.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif