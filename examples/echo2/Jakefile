const path = require('path');

const isAsync = {
	async: true
};

const applicationName = 'main';
const sourceDirectory = 'src';
const objectDirectory = 'obj';
const includeDirectory = path.join('..', '..', 'include');
const outputDirectory = '';

// target file name
let target = outputDirectory ? outputDirectory + '/' + applicationName : applicationName;

const cc = 'gcc';
const ld = 'ld';
const cflags = '-I ../../lib/include -O3 -g -m64 -ffreestanding -fno-stack-protector -std=gnu99';
const ldflags = '-melf_x86_64 -nostdlib'; 
const options = '-Wall -Werror';
const libs = '../../lib/libcore.a';

let files = new jake.FileList();

// retrieve source files to jakeFile object
files.include(path.join(sourceDirectory, '/', '*.c'));

// get compiled object files from jakeFile object
let objectFiles = files.toArray().map(fileName => {
	return fileName.replace(sourceDirectory, objectDirectory).replace('.c', '.o');
});

function compile (name, source, callback) {
	var cmd = [cc, cflags, '-c', '-o', name, source, options].join(' ');
	console.log(cmd);
	jake.exec(cmd, callback);
};

function link (target, objs, callback) {
	var cmd = [ld, ldflags, '-e', target, '-o', target, objs, libs].join(' ');
	console.log(cmd);
	jake.exec(cmd, callback);
};

// this regex bind each object files
// and invoke each fileNames to `this`
// do not try arrow function to callback
let condition = new RegExp(objectDirectory + '/.+' + '\\.o$');
rule(
	condition,
	fileName => {
		let index = fileName.lastIndexOf('/');
		let sourceFile = sourceDirectory + fileName.substr(index).replace('.o', '.c');
		console.log('== check compile target:', fileName, 'from', sourceFile);
		return sourceFile;
	},
	isAsync,
	function() {
		jake.mkdirP(objectDirectory);
		let { name, source } = this;
		compile(name, source, () => {
			complete();
		});
	}
);

// applicationName can use as a task name
// every file applicationName injected by task name
file(applicationName, objectFiles, isAsync, function() {
	jake.mkdirP(outputDirectory);
	link(applicationName, objectFiles, () => {
		complete();
	});
});

desc('compile');
task('compile', [applicationName], () => {
	console.log('== compile:', 'Finished with compilation');
});

desc('clean up');
task('clean', () => {
	outputDirectory && jake.rmRf(outputDirectory);
	objectDirectory && jake.rmRf(objectDirectory);
	jake.rmRf(target);
	console.log('== clean:', 'Finished with clean up');
});

desc('load and run this net app');
task('run', () => {
	jake.exec('./run.sh')
});

desc('default action. just compile');
task('default', ['compile'], () => {
	console.log('== default:', 'Everything done!');
});
